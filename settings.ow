settings
{
	main
	{
		Description: "Friend Trainer"
	}

	modes
	{
		Assault
		{
			Capture Speed Modifier: 10%
		}

		Control
		{
			Capture Speed Modifier: 10%
			Score To Win: 3
			Scoring Speed Modifier: 10%
		}

		disabled Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 50
		}

		Escort
		{
			Payload Speed Modifier: 10%
		}

		Hybrid
		{
			Capture Speed Modifier: 10%
			Payload Speed Modifier: 10%
		}

		disabled Team Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 200
			Self Initiated Respawn: Off
		}

		General
		{
			Hero Limit: Off
			Respawn Time Scalar: 41%
		}
	}
}

variables
{
	global:
		0: Debug
		1: SpeedMultiplier
		2: SpeedMin
		3: DamageMultiplier
		4: DamageMin
		5: HealthMultiplier
		6: HealthMin
		7: HealingMultiplier
		8: HealingMin

	player:
		0: KD
}

subroutines
{
	0: SetAllStats
	1: SetKD
}

rule("Set Globals")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(Debug, True);
		Set Global Variable(SpeedMultiplier, Absolute Value(0.100));
		Set Global Variable(SpeedMin, Absolute Value(70));
		Set Global Variable(DamageMultiplier, Absolute Value(0.055));
		Set Global Variable(DamageMin, Absolute Value(70));
		Set Global Variable(HealingMultiplier, Absolute Value(0.050));
		Set Global Variable(HealingMin, Absolute Value(70));
		Set Global Variable(HealthMultiplier, Absolute Value(0.350));
		Set Global Variable(HealthMin, Absolute Value(70));
	}
}

rule("HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("KD: {0}", Player Variable(Event Player, KD), Null, Null), Null, Null, Left, 0, White,
			White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Speed: {0}", Speed Of(Event Player), Null, Null), Null, Null, Left, 0, White, White,
			White, Visible To and String, Default Visibility);
	}
}

rule("Respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global Variable(Debug) == True;
	}

	actions
	{
		Set Respawn Max Time(All Players(All Teams), 2);
	}
}

rule("Set Initial Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Call Subroutine(SetAllStats);
		Heal(Event Player, Null, Max Health(Event Player));
	}
}

rule("Set SetKD - On Elim")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	actions
	{
		Call Subroutine(SetKD);
	}
}

rule("Set SetKD - On Death")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Call Subroutine(SetKD);
	}
}

rule("SetAllStats - On Elim")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	actions
	{
		Call Subroutine(SetAllStats);
	}
}

rule("SetAllStats - On Death")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Call Subroutine(SetAllStats);
		Heal(Event Player, Null, Max Health(Event Player));
	}
}

rule("SetKD")
{
	event
	{
		Subroutine;
		SetKD;
	}

	actions
	{
		"let KD = Deaths - Elims"
		Set Player Variable(Event Player, KD, Subtract(Number of Deaths(Event Player), Number of Eliminations(Event Player)));
	}
}

rule("SetAllStats")
{
	event
	{
		Subroutine;
		SetAllStats;
	}

	actions
	{
		"MaxHealth = Max(HealthMin, 100 * (1+HealthMultiplier)^KD)"
		Set Max Health(Event Player, Max(Global Variable(HealthMin), Multiply(100, Raise To Power(Add(1, Global Variable(
			HealthMultiplier)), Player Variable(Event Player, KD)))));
		"MoveSpeed = Max(SpeedMin, 100 * (1+SpeedMultiplier)^KD)"
		Set Move Speed(Event Player, Max(Global Variable(SpeedMin), Multiply(100, Raise To Power(Add(1, Global Variable(SpeedMultiplier)),
			Player Variable(Event Player, KD)))));
		"HealingDealt = Max(HealingMin, 100 * (1+HealingMultiplier)^KD)"
		Set Healing Dealt(Event Player, Max(Global Variable(HealingMin), Multiply(100, Raise To Power(Add(1, Global Variable(
			HealingMultiplier)), Player Variable(Event Player, KD)))));
		"DamageDealt = Max(DamageMin, 100 * (1+DamageMultiplier)^KD)"
		Set Damage Dealt(Event Player, Max(Global Variable(DamageMin), Multiply(100, Raise To Power(Add(1, Global Variable(
			DamageMultiplier)), Player Variable(Event Player, KD)))));
	}
}